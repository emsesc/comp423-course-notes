{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Emily's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Emily Chen</li> <li>Reviewer: Daniel Islas</li> </ul> <p>This tutorial is a quickstart on how to set up a Rust container for a development environment. By the end of this tutorial, you will have a working Rust dev container!</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"\ud83d\udd11 Prerequisites","text":"<p>Before we begin the tutorial, you'll want to have the following:</p> <ul> <li>Docker</li> <li>Visual Studio Code (VS Code)</li> <li>A <code>git</code> installation.</li> </ul> <p>Note</p> <p>If you're missing any of these tools, click the links above for installation instructions before proceeding.</p>"},{"location":"tutorials/rust-setup/#part-1-creating-your-git-repository","title":"Part 1: Creating Your Git Repository","text":"<p>Open your terminal and change directories to where you want to set up your dev container.</p> <p>Run the following commands to create a new directory. <pre><code>mkdir rust-dev-container\ncd rust-dev-container\n</code></pre></p> <p>Info</p> <p>This ensures you start with a clean working directory for your Rust project.</p> <p>Now, let's initialize a new Git repository. <pre><code>git init\n</code></pre></p> <p>Finally, we'll add a README file. <pre><code>echo \"# Rust Dev Container\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-your-dev-container","title":"Part 2: Setting Up Your Dev Container","text":""},{"location":"tutorials/rust-setup/#step-1-configuring-your-container","title":"Step 1: Configuring your container","text":"<ol> <li>Open VS Code</li> <li>Open the directory that contains your repository</li> <li>Install the Dev Containers VSCode Extension</li> </ol> <p>In this new directory that is currently being tracked by git, add the following JSON object to a file named <code>devcontainer.json</code> in a hidden directory <code>.devcontainer</code>. The full file path should be <code>.devcontainer/devcontainer.json</code>. <pre><code>{\n    \"name\": \"Rust Development Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></p> <ul> <li>The name allows you to differentiate development environments.</li> <li>The image specifies the prebuilt Rust container image from Microsoft that we will be using.</li> <li>The customizations species to also install the official <code>rust-analyzer</code> VSCode plugin by the Rust Programming Language Group that helps with Rust development.</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-start-your-environment","title":"Step 3: Start your environment","text":"<ol> <li>Open the command palette from the menu bar through View &gt; Command Palette.</li> <li>Start building your dev container by entering the command <code>&gt;Dev Containers: Open Dev Container</code>.</li> </ol> <p>Tip</p> <p>Use the shortcut Ctrl+Shift+P (or Cmd+Shift+P on Mac) to quickly open the command palette.</p>"},{"location":"tutorials/rust-setup/#step-4-verify-your-environment","title":"Step 4: Verify your environment","text":"<p>Let's make sure the container is working as expected.</p> <ol> <li>Open terminal in the running container</li> <li>Run <code>rustc --version</code>.</li> </ol> <p>You should see an output like this: <pre><code>rustc 1.83.0 (90b35a623 2024-11-26)\n</code></pre> Success! You are now running Rust in a development container.</p>"},{"location":"tutorials/rust-setup/#part-3-dusting-off-the-rust","title":"Part 3: Dusting off the Rust","text":"<p>Now that the backbone is set up, we can now create our Rust project.</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-binary-project","title":"Step 1: Create a binary project","text":"<p>Let's create a new binary project named \"hello_world\" using the following command. We are are adding the <code>--vcs none</code> option because we don't need to create a new <code>git</code> repository. <pre><code>cargo new hello_world --bin --vcs none\n</code></pre></p> <p>In the <code>hello-world/src/main.rs</code> file, <code>cargo</code> has created the following file for you: <pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre></p> <p>Let's customize it for ourselves by making it output \"Hello COMP423\" instead. Modify the file to read the following: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-building-and-running-your-project","title":"Step 2: Building and running your project","text":"<p>There are two ways to build and run your project.</p> <p>Before we begin, change directory into your new binary project. <pre><code>cd hello_world\n</code></pre></p> <p>(1) The first way is to use <code>cargo build</code>. <pre><code>cargo build\n./target/debug/hello_world\n</code></pre> Running both of these commands will yield: <pre><code>    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.01s\nHello COMP423\n</code></pre> <code>cargo build</code> compiles the code in your Rust file into machine code, similar to that of how <code>gcc</code> does so for C code. The compiled binary is then stored in the <code>target</code> directory.</p> <p>Info</p> <p>If you run into an error with <code>cargo build</code> when you are running the development container on MacOS, make sure you have experimental features turned off in Docker.</p> <p>(2) The second way is to do both commands in one step with <code>cargo run</code>. <pre><code>cargo run\n</code></pre> You'll receive an output like so: <pre><code>   Compiling hello_world v0.1.0 (/workspaces/rust-dev-container/hello_world)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.54s\n     Running `target/debug/hello_world`\nHello COMP423\n</code></pre></p> <p>The difference between <code>cargo run</code> and <code>cargo build</code> is that <code>run</code> will compile and run the program in one command, whereas <code>cargo build</code> only compiles your code.</p> <p>Note</p> <p>For more information about cargo, refer to this documentation.</p>"},{"location":"tutorials/rust-setup/#congratulations-you-now-have-a-working-rust-development-environment","title":"Congratulations! You now have a working Rust development environment.","text":""}]}